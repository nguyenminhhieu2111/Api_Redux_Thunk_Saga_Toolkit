{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport requestGetMovie from \"./request\";\nexport const handleFetchNews = createAsyncThunk('movie/handleFetchNews', async (query, thunkAPI) => {\n  const response = await requestGetMovie(query);\n  return response.data.results;\n});\nconst initialState = {\n  results: [],\n  loading: true,\n  errorMessage: \"\",\n  query: \"\"\n};\nconst newsSlice = createSlice({\n  name: \"movie\",\n  initialState,\n  reducers: {\n    setLoading: (state, action) => ({\n      ...state,\n      loading: action.payload\n    })\n  },\n  extraReducers: builder => {\n    builder.addCase(handleFetchNews.fulfilled, (state, action) => {\n      state.results = action.payload;\n      state.loading = false;\n    }).addCase(handleFetchNews.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(handleFetchNews.rejected, (state, action) => {\n      state.loading = false;\n    }).add;\n  }\n});\nexport default newsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","requestGetMovie","handleFetchNews","query","thunkAPI","response","data","results","initialState","loading","errorMessage","newsSlice","name","reducers","setLoading","state","action","payload","extraReducers","builder","addCase","fulfilled","pending","rejected","add","reducer"],"sources":["E:/future/src/redux-thunk/newSlice.js"],"sourcesContent":["import {createAsyncThunk,createSlice} from \"@reduxjs/toolkit\"\r\nimport requestGetMovie from \"./request\";\r\n\r\n\r\n\r\nexport const handleFetchNews=createAsyncThunk(\r\n'movie/handleFetchNews',async (query,thunkAPI)=>{\r\nconst response=await requestGetMovie(query);\r\nreturn response.data.results\r\n})\r\n\r\nconst initialState={\r\n    results:[],\r\n    loading:true,\r\n    errorMessage:\"\",\r\n    query:\"\"\r\n}\r\nconst newsSlice=createSlice({\r\n    name:\"movie\",\r\n    initialState,\r\n    reducers:{\r\n        setLoading:(state,action)=>({\r\n            ...state,\r\n            loading:action.payload\r\n        })\r\n    },\r\n    extraReducers:(builder)=>{\r\n        builder\r\n        .addCase(handleFetchNews.fulfilled,(state,action)=>{\r\n           state.results=action.payload \r\n           state.loading = false\r\n        })\r\n        .addCase(handleFetchNews.pending,(state,action)=>{\r\n            state.loading = true\r\n    \r\n        })\r\n        .addCase(handleFetchNews.rejected,(state,action)=>{\r\n            state.loading = false \r\n        })\r\n        .add\r\n    }\r\n})\r\nexport default newsSlice.reducer"],"mappings":"AAAA,SAAQA,gBAAgB,EAACC,WAAW,QAAO,kBAAkB;AAC7D,OAAOC,eAAe,MAAM,WAAW;AAIvC,OAAO,MAAMC,eAAe,GAACH,gBAAgB,CAC7C,uBAAuB,EAAC,OAAOI,KAAK,EAACC,QAAQ,KAAG;EAChD,MAAMC,QAAQ,GAAC,MAAMJ,eAAe,CAACE,KAAK,CAAC;EAC3C,OAAOE,QAAQ,CAACC,IAAI,CAACC,OAAO;AAC5B,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAC;EACfD,OAAO,EAAC,EAAE;EACVE,OAAO,EAAC,IAAI;EACZC,YAAY,EAAC,EAAE;EACfP,KAAK,EAAC;AACV,CAAC;AACD,MAAMQ,SAAS,GAACX,WAAW,CAAC;EACxBY,IAAI,EAAC,OAAO;EACZJ,YAAY;EACZK,QAAQ,EAAC;IACLC,UAAU,EAAC,CAACC,KAAK,EAACC,MAAM,MAAI;MACxB,GAAGD,KAAK;MACRN,OAAO,EAACO,MAAM,CAACC;IACnB,CAAC;EACL,CAAC;EACDC,aAAa,EAAEC,OAAO,IAAG;IACrBA,OAAO,CACNC,OAAO,CAAClB,eAAe,CAACmB,SAAS,EAAC,CAACN,KAAK,EAACC,MAAM,KAAG;MAChDD,KAAK,CAACR,OAAO,GAACS,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACN,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC,CACDW,OAAO,CAAClB,eAAe,CAACoB,OAAO,EAAC,CAACP,KAAK,EAACC,MAAM,KAAG;MAC7CD,KAAK,CAACN,OAAO,GAAG,IAAI;IAExB,CAAC,CAAC,CACDW,OAAO,CAAClB,eAAe,CAACqB,QAAQ,EAAC,CAACR,KAAK,EAACC,MAAM,KAAG;MAC9CD,KAAK,CAACN,OAAO,GAAG,KAAK;IACzB,CAAC,CAAC,CACDe,GAAG;EACR;AACJ,CAAC,CAAC;AACF,eAAeb,SAAS,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}